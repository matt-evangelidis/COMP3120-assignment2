//? Mixins allow you to predefine large chunks of css that can be copied while inserting certain parameters

//@param radius { number } => The desired border radius
@mixin border-radius($radius) {
	//# Sets border radius to passed 'radius'
	//? THe border radius property requries many backup properties to make sure it works on all browsers, so we can use a mixin to let us include all the properties in one line
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	-o-border-radius: $radius;
}

@mixin border-radius($radius) {
	//# Set border radius with all special case properties
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	-o-border-radius: $radius;
}

@mixin square($size) {
	//# Set width and height equal to passed 'size'
	height: $size;
	width: $size;
}
//@param inline { boolean } [false] => If true, display is set to 'inline-flex', else display is set to 'flex'
@mixin flex-wrapper($inline: false, $justify: center, $align: center) {
	//# Flex wrapper properties
	@if $inline {
		display: inline-flex;
	} @else {
		display: flex;
	}
	justify-content: $justify;
	@if $align== center {
		& > * {
			margin-top: auto;
			margin-bottom: auto;
		}
	}
	// align-items: $align;
}

//@param height { number } [100%] => Height of element
@mixin flex-wrapper-height($height: 100%) {
	//# Extends 'flex-wrapper()', also sets height according to IE requirements
	@include flex-wrapper();

	min-height: $height;
	height: 1px;
	//? IE compatibility fix, 1px height is overridden by min-height on render but is required for items in flex wrapper to be centered on IE
}

@mixin transform($properties) {
	transform: $properties;
	-webkit-transform: $properties;
	-moz-transform: $properties;
	-ms-transform: $properties;
	-o-transform: $properties;
}

@mixin transition($properties) {
	transition: $properties;
	-webkit-transition: $properties;
	-moz-transition: $properties;
	-ms-transition: $properties;
	-o-transition: $properties;
}

@mixin flex-space-horizontal($gap: 0px) {
	margin-right: $gap;
	width: 100%;

	&:last-child {
		margin-right: 0;
	}
}

@mixin padding-space-horizontal($gap) {
	padding-right: $gap;

	&:last-child {
		padding-right: 0;
	}
}

@mixin vertical-spacing($spacing: $item-spacing-std) {
	&:not(:last-child) {
		margin-bottom: $spacing;
	}
}

@mixin vertical-padding($padding) {
	padding-top: $padding;
	padding-bottom: $padding;
}
@mixin horizontal-padding($padding) {
	padding-left: $padding;
	padding-right: $padding;
}

@mixin vertical-margin($margin) {
	margin-top: $margin;
	margin-bottom: $margin;
}
@mixin horizontal-margin($margin, $ends: true) {
	margin-left: $margin;
	margin-right: $margin;
	@if $ends == false {
		&:first-child {
			margin-left: 0;
		}
		&:last-child {
			margin-right: 0;
		}
	}
}
